package me.ling.kipfin.vkbot.controllers.group;

import me.ling.kipfin.core.entities.university.Teacher;
import me.ling.kipfin.database.university.GroupsDB;
import me.ling.kipfin.database.university.TeachersDB;
import me.ling.kipfin.vkbot.commands.ControllerArgs;
import me.ling.kipfin.vkbot.entities.BTUser;
import me.ling.kipfin.vkbot.commands.Controller;

/**
 * –ö–æ–Ω—Ç—Ä–ª–ª–µ—Ä —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
 */
public class GetRouterController extends Controller {

    @Override
    public boolean test(String text, BTUser user, ControllerArgs args) {
        return (user.isStudent() && this.testAlias(text, "–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")) ||
                (user.isTeacher() && this.testAlias(text, "–ì—Ä—É–ø–ø–∞ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ"));
    }

    @Override
    public Object execute(String text, BTUser user, ControllerArgs args) {
        if (user.isStudent()) {
            for (Teacher teacher : TeachersDB.shared.getCache().values()) {
                Integer groupId = teacher.getGroupId();
                if (groupId != null) {
                    String group = GroupsDB.shared.getById(groupId).getTitle();
                    if (group.equals(user.getState())) {
                        return "–ì—Ä—É–ø–ø–∞ " + user.getState() + "\n–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: " + teacher.getName();
                    }
                }
            }
            return "–•–º, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã " + user.getState();
        } else if (user.isTeacher()) {
            for (Teacher teacher : TeachersDB.shared.getCache().values()) {
                if (teacher.getName().equals(user.getState())) {
                    Integer groupId = teacher.getGroupId();
                    if (groupId != null) {
                        String group = GroupsDB.shared.getById(groupId).getTitle();
                        return "–í—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ –≥—Ä—É–ø–ø–æ–π: " + group;
                    }
                }
            }
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É " + user.getState() + " –∏ [–∫–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å]... –°–º–µ—é –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ —É –í–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã üò∂";
        }
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
    }
}
